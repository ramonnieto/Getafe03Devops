---
# Primero, ejecuta las tareas comunes de configuración (instalar docker, actualizar y poco más)
- name: Importar playbook común
  ansible.builtin.import_playbook: playbook_common.yml

# Luego, ejecuta las tareas específicas del manager
- name: Configuración Específica del Nodo Manager
  hosts: all # Aunque ponga all, al no existir inventario es localhost 
  become: yes
  # Define variables específicas del manager
  vars:
    swarm_join_file: /vagrant/unir_swarm.txt # Define la ruta para el archivo del comando de join
    manager_ip: 192.168.33.10 # Define explícitamente la IP del manager aquí
    repo_url: https://github.com/ricardoinstructor/bus-app.git
    repo_dest: /vagrant/bus-app # el volcado del git
    app_build_dir: "{{ repo_dest }}/bus-ticket-app/" # Directorio para build/deploy    
  tasks:
    - name: Clonar o actualizar el repositorio de la aplicación
      ansible.builtin.git:
        repo: "{{ repo_url }}"
        dest: "{{ repo_dest }}"
        version: main # o la rama/tag que necesites, 'main' es común ahora
        clone: yes
        update: yes # Intenta hacer 'git pull' si el repo ya existe

    # Esto se ejecuta DESPUÉS de instalar docker
    - name: Construir imágenes de la aplicación con docker compose
      ansible.builtin.command:
        cmd: docker compose build
        chdir: "{{ app_build_dir }}" # Usa la variable para el directorio correcto
      environment: # Pasa variables de entorno si son necesarias para compose
        COMPOSE_PROJECT_NAME: busapp # Opcional: establece un nombre de proyecto
      register: compose_build_result
      changed_when: "'Successfully built' in compose_build_result.stdout"

    - name: Inicializar Docker Swarm
      ansible.builtin.command:
        cmd: "docker swarm init --advertise-addr {{ manager_ip }}"
      register: swarm_init_result
      failed_when: "'Error response from daemon' in swarm_init_result.stderr and 'This node is already part of a swarm' not in swarm_init_result.stderr"
      changed_when: "'Swarm initialized' in swarm_init_result.stdout"

    - name: Extraer la línea de comando exacta para unirse
      ansible.builtin.shell:
        cmd: >
          docker swarm join-token worker | tail -2 | head -1
      register: swarm_join_command

    - name: Guardar el comando en un archivo
      ansible.builtin.copy:
        content: "{{ swarm_join_command.stdout }}"
        dest: "{{ swarm_join_file }}"

    - name: Desplegar Stack Docker
      ansible.builtin.command:
        cmd: docker stack deploy -c docker-stack.yml bus_stack # Nombrando el stack 'bus_stack' así para ser original
        chdir: /vagrant/bus-app/bus-ticket-app # Usa la variable heredada para el directorio correcto
      register: stack_deploy_result
      changed_when: "'Creating network' in stack_deploy_result.stdout or 'Updating service' in stack_deploy_result.stdout"
